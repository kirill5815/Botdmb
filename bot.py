#!/usr/bin/env python3
import os, time, threading, datetime as dt
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, PicklePersistence
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, PicklePersistence, filters
)

BOT_TOKEN = os.environ["BOT_TOKEN"]          # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–∞–º
PORT        = int(os.environ.get("PORT", 10000))  # –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç Render

# --- —Ñ–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ –≥–∞—Å–∏–ª –∏–Ω—Å—Ç–∞–Ω—Å ---
class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def keep_alive():
    with HTTPServer(("", PORT), Handler) as srv:
        srv.serve_forever()

threading.Thread(target=keep_alive, daemon=True).start()

# --- –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
persistence = PicklePersistence("bot_data.pickle")

async def start(update: Update, _):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –¥–Ω–∏ –¥–æ –¥–µ–º–±–µ–ª—è.\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
    )

async def dembel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = ctx.bot_data.get(user.id)
    if not data or "date" not in data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –¥–µ–º–±–µ–ª—è!")
        return
    dembel_date = dt.date.fromisoformat(data["date"])
    delta = (dembel_date - dt.date.today()).days
    if delta < 0:
        await update.message.reply_text("üéâ –¢—ã —É–∂–µ –¥–µ–º–±–µ–ª—å!")
    elif delta == 0:
        await update.message.reply_text("üéä –°–µ–≥–æ–¥–Ω—è –¥–µ–º–±–µ–ª—å!")
    else:
        await update.message.reply_text(f"üìÜ –î–æ –¥–µ–º–±–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å: {delta} –¥–Ω–µ–π")

async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        dembel_date = dt.datetime.strptime(update.message.text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    if dembel_date <= dt.date.today():
        await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
        return
    ctx.bot_data.setdefault(user.id, {})["date"] = dembel_date.isoformat()
    await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª!")

def main():
    app = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dembel", dembel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    print("Bot started on Render ‚Ä¶")
    app.run_polling(stop_signals=None)   # Render –Ω–µ –ª—é–±–∏—Ç SIGINT

if __name__ == "__main__":
    main()
