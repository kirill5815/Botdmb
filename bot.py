#!/usr/bin/env python3
import os
import random
import datetime as dt
import asyncio
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    PicklePersistence,
    MessageHandler,
    filters,
)


BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

MOSCOW = pytz.timezone("Europe/Moscow")
PERSIST_FILE = "bot_data.pickle"

LOVE_LINES = [
    "–ú–æ—è —Å–∞–º–∞—è —Å—Ç–æ–π–∫–∞—è –¥–µ–≤—á–æ–Ω–∫–∞, —Ç—ã ‚Äî –º–æ–π –ø–æ—Å—Ç ‚Ññ1, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–µ—Å—É –≤ —Å–µ—Ä–¥—Ü–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    "–°–∫–æ–ª—å–∫–æ –±—ã –Ω–∏ –±—ã–ª–æ –Ω–∞—Ä—è–¥–æ–≤, —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ä–º–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ—è —É–ª—ã–±–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ.",
    "–°—á–∏—Ç–∞—é –¥–Ω–∏, –∞ –ø–æ—Ç–æ–º –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å –ø–æ—Ü–µ–ª—É–∏ ‚Äî –æ–±–µ—â–∞—é –¥–æ–≥–Ω–∞—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ.",
    "–¢—ã –º–æ–π —Ç—ã–ª –∏ –º–æ–π —Ñ—Ä–æ–Ω—Ç –ª—é–±–≤–∏: –ø–æ–∫–∞ —Ç—ã –∂–¥—ë—à—å ‚Äî —è –Ω–µ –±–æ—é—Å—å –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
    "–ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç–µ–±—è –≤ —Ä–∞–ø–æ—Ä—Ç: ¬´–î–µ–≤—É—à–∫–∞ –∂–¥—ë—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏—è 100 %¬ª.",
    "–ì–æ—Ç–æ–≤ –æ–±–æ–π—Ç–∏ –≤–µ—Å—å –ø–æ–ª–∏–≥–æ–Ω, –ª–∏—à—å –±—ã —Å–∫–æ—Ä–µ–µ –æ–∫–∞–∑–∞—Ç—å—Å—è —Ä—è–¥–æ–º –∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å.",
    "–¢–≤–æ–∏ ¬´—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏¬ª –≥—Ä–µ—é—Ç –ª—É—á—à–µ –ª—é–±–æ–≥–æ –∫–æ—Å—Ç—Ä–∞ –≤ –ø–æ–ª–µ.",
    "–î–æ–º–∞ —É–∂–µ –ø–∞—Ö–Ω–µ—Ç —Ç–≤–æ–∏–º —à–∞–º–ø—É–Ω–µ–º ‚Äî —è –ø–æ–º–Ω—é –∏ –º–µ—á—Ç–∞—é –≤–¥–æ—Ö–Ω—É—Ç—å —ç—Ç–æ—Ç –∑–∞–ø–∞—Ö –≤–∂–∏–≤—É—é.",
    "–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–∏–∫–∞–∑ ‚Ññ1: ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –µ—ë —Å–∞–º–æ–π —Å—á–∞—Å—Ç–ª–∏–≤–æ–π¬ª.",
    "–ü–æ–∫–∞ —Å–ª—É–∂—É, —Ö—Ä–∞–Ω—é –∫–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Ñ–æ—Ç–æ –≤ –≥—Ä—É–¥–∏, –∫–∞–∫ –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç –¥–ª—è –¥—É—à–∏.",
]

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------
def main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíå –¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="love")]
    ])

# ---------- –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç ----------
def format_countdown(target_date: dt.date) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–Ω. —á—á:–º–º:—Å—Å –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã –ø–æ –ú–°–ö."""
    now = dt.datetime.now(MOSCOW)
    target_dt = MOSCOW.localize(dt.datetime.combine(target_date, dt.time(0, 0)))
    delta = target_dt - now
    if delta.total_seconds() <= 0:
        return "üéâ –î–µ–º–±–µ–ª—å –Ω–∞—Å—Ç–∞–ª!"
    days = delta.days
    hours, rem = divmod(delta.seconds, 3600)
    mins, secs = divmod(rem, 60)
    return f"–î–æ –≤—Å—Ç—Ä–µ—á–∏: {days} –¥–Ω. {hours:02d}:{mins:02d}:{secs:02d}"

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = ctx.bot_data.setdefault(user.id, {})
    if "date" not in data:
        # –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–∞
        await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –¥–µ–º–±–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        data["expect_date"] = True
        return

    # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    msg = await update.message.reply_text(
        format_countdown(dt.date.fromisoformat(data["date"])),
        reply_markup=main_kb()
    )
    # –∑–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ—Å–µ–∫—É–Ω–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    ctx.job_queue.run_repeating(
        update_countdown,
        interval=1,
        first=0,
        data={"chat_id": msg.chat_id, "message_id": msg.message_id},
        name=f"countdown_{user.id}"
    )

async def update_countdown(context: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = context.job.data
    user_id = context.job.name.split("_")[1]
    user_data = context.application.bot_data.get(int(user_id), {})
    if "date" not in user_data:
        context.job.schedule_removal()
        return
    try:
        await context.bot.edit_message_text(
            chat_id=job_data["chat_id"],
            message_id=job_data["message_id"],
            text=format_countdown(dt.date.fromisoformat(user_data["date"])),
            reply_markup=main_kb()
        )
    except Exception as e:
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å
        context.job.schedule_removal()

async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = ctx.bot_data.setdefault(user.id, {})
    if data.get("expect_date"):
        try:
            target = dt.datetime.strptime(update.message.text, "%d.%m.%Y").date()
        except ValueError:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        if target <= dt.date.today():
            await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        data["date"] = target.isoformat()
        data.pop("expect_date", None)
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        msg = await update.message.reply_text(
            format_countdown(target),
            reply_markup=main_kb()
        )
        ctx.job_queue.run_repeating(
            update_countdown,
            interval=1,
            first=0,
            data={"chat_id": msg.chat_id, "message_id": msg.message_id},
            name=f"countdown_{user.id}"
        )

async def send_love(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await ctx.bot.send_message(
        update.effective_chat.id,
        text=random.choice(LOVE_LINES)
    )

# ---------- –∑–∞–ø—É—Å–∫ ----------
def main() -> None:
    persistence = PicklePersistence(filepath=PERSIST_FILE)
    app = Application.builder().token(BOT_TOKEN).persistence(persistence).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(send_love, pattern="^love$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("Bot (MSK + live countdown) started ‚Ä¶")
    app.run_polling(stop_signals=None)

if __name__ == "__main__":
    main()
