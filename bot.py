#!/usr/bin/env python3
import pytz, datetime as dt, asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, PicklePersistence, filters
import os, time, threading, datetime as dt
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, PicklePersistence
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, PicklePersistence, filters
)

BOT_TOKEN = os.environ["BOT_TOKEN"]          # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–∞–º
PORT        = int(os.environ.get("PORT", 10000))  # –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç Render

# --- —Ñ–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ –≥–∞—Å–∏–ª –∏–Ω—Å—Ç–∞–Ω—Å ---
class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–®–ª—ë—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ–≥–æ –∑–∞–¥–∞–Ω–∞ –¥–∞—Ç–∞, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å."""
    bot_data = context.application.bot_data
    for user_id, data in bot_data.items():
        if "date" not in data:
            continue
        dembel_date = dt.date.fromisoformat(data["date"])
        delta = (dembel_date - dt.date.today()).days
        if delta < 0:                       # —É–∂–µ –¥–µ–º–±–µ–ª—å
            text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–∂–µ –¥–µ–º–±–µ–ª—å!"
        elif delta == 0:
            text = "üéä –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –• ‚Äì –î–ï–ú–ë–ï–õ–¨!"
        else:
            text = f"üìÜ –î–æ –¥–µ–º–±–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π,–±—É—Å–∏–Ω–∫–∞ –∏ –º—ã –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ ‚ù§"
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            print(f"skip {user_id}: {e}")

def keep_alive():
    with HTTPServer(("", PORT), Handler) as srv:
        srv.serve_forever()

threading.Thread(target=keep_alive, daemon=True).start()

# --- –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
persistence = PicklePersistence("bot_data.pickle")

async def start(update: Update, _):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –¥–Ω–∏ –¥–æ –¥–µ–º–±–µ–ª—è.\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
    )

async def dembel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = ctx.bot_data.get(user.id)
    if not data or "date" not in data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –¥–µ–º–±–µ–ª—è!")
        return
    dembel_date = dt.date.fromisoformat(data["date"])
    delta = (dembel_date - dt.date.today()).days
    if delta < 0:
        await update.message.reply_text("üéâ –¢—ã —É–∂–µ –¥–µ–º–±–µ–ª—å!")
    elif delta == 0:
        await update.message.reply_text("üéä –°–µ–≥–æ–¥–Ω—è –¥–µ–º–±–µ–ª—å!")
    else:
        await update.message.reply_text(f"üìÜ –î–æ –¥–µ–º–±–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å: {delta} –¥–Ω–µ–π")


async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        dembel_date = dt.datetime.strptime(update.message.text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    if dembel_date <= dt.date.today():
        await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
        return
    ctx.bot_data.setdefault(user.id, {})["date"] = dembel_date.isoformat()
    await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª!")
def set_daily_job(job_queue: JobQueue):
    # 09:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å; first=(–±–ª–∏–∂–∞–π—à–µ–µ 09:00)
    now = dt.datetime.utcnow()
    target = now.replace(hour=9, minute=0, second=0, microsecond=0)
    if target < now:
        target += dt.timedelta(days=1)
    job_queue.run_repeating(daily_reminder, interval=dt.timedelta(days=1), first=target)
def main():
    app = Application.builder().token(BOT_TOKEN).persistence(persistence).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dembel", dembel))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
def set_daily_job(job_queue: JobQueue):
    import pytz
    msk = pytz.timezone("Europe/Moscow")
    now = dt.datetime.now(msk)
    target = now.replace(hour=9, minute=0, second=0, microsecond=0)
    if target <= now:
        target += dt.timedelta(days=1)
    utc_target = target.astimezone(pytz.utc)
    job_queue.run_repeating(daily_reminder, interval=dt.timedelta(days=1), first=utc_target)

    # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    set_daily_job(app.job_queue)

    print("Bot + daily reminder started ‚Ä¶")
    app.run_polling(stop_signals=None)
# 1. –ò–º–ø–æ—Ä—Ç—ã (–¥–æ–±–∞–≤—å –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)
import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

# 2. –¢–µ–∫—Å—Ç—ã-–ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –Ω–µ—ë
LOVE_LINES = [
    "–ú–æ—è —Å–∞–º–∞—è —Å—Ç–æ–π–∫–∞—è –¥–µ–≤—á–æ–Ω–∫–∞, —Ç—ã ‚Äî –º–æ–π –ø–æ—Å—Ç ‚Ññ1, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–µ—Å—É –≤ —Å–µ—Ä–¥—Ü–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    "–°–∫–æ–ª—å–∫–æ –±—ã –Ω–∏ –±—ã–ª–æ –Ω–∞—Ä—è–¥–æ–≤, —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ä–º–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ—è —É–ª—ã–±–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ.",
    "–°—á–∏—Ç–∞—é –¥–Ω–∏, –∞ –ø–æ—Ç–æ–º –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å –ø–æ—Ü–µ–ª—É–∏ ‚Äî –æ–±–µ—â–∞—é –¥–æ–≥–Ω–∞—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ.",
    "–¢—ã –º–æ–π —Ç—ã–ª –∏ –º–æ–π —Ñ—Ä–æ–Ω—Ç –ª—é–±–≤–∏: –ø–æ–∫–∞ —Ç—ã –∂–¥—ë—à—å ‚Äî —è –Ω–µ –±–æ—é—Å—å –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
    "–ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç–µ–±—è –≤ —Ä–∞–ø–æ—Ä—Ç: ¬´–î–µ–≤—É—à–∫–∞ –∂–¥—ë—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏—è 100 %¬ª.",
    "–ì–æ—Ç–æ–≤ –æ–±–æ–π—Ç–∏ –≤–µ—Å—å –ø–æ–ª–∏–≥–æ–Ω, –ª–∏—à—å –±—ã —Å–∫–æ—Ä–µ–µ –æ–∫–∞–∑–∞—Ç—å—Å—è —Ä—è–¥–æ–º –∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å.",
    "–¢–≤–æ–∏ ¬´—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏¬ª –≥—Ä–µ—é—Ç –ª—É—á—à–µ –ª—é–±–æ–≥–æ –∫–æ—Å—Ç—Ä–∞ –≤ –ø–æ–ª–µ.",
    "–î–æ–º–∞ —É–∂–µ –ø–∞—Ö–Ω–µ—Ç —Ç–≤–æ–∏–º —à–∞–º–ø—É–Ω–µ–º ‚Äî —è –ø–æ–º–Ω—é –∏ –º–µ—á—Ç–∞—é –≤–¥–æ—Ö–Ω—É—Ç—å —ç—Ç–æ—Ç –∑–∞–ø–∞—Ö –≤–∂–∏–≤—É—é.",
    "–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–∏–∫–∞–∑ ‚Ññ1: ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –µ—ë —Å–∞–º–æ–π —Å—á–∞—Å—Ç–ª–∏–≤–æ–π¬ª.",
    "–ü–æ–∫–∞ —Å–ª—É–∂—É, —Ö—Ä–∞–Ω—é –∫–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Ñ–æ—Ç–æ –≤ –≥—Ä—É–¥–∏, –∫–∞–∫ –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç –¥–ª—è –¥—É—à–∏."
]

# 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
def girl_menu_mini() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíå –¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="love")]
    ])

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def send_love(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(
        update.effective_chat.id,
        text=random.choice(LOVE_LINES)
    )

# 5. –ì–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–∏–º–µ—Ä –≤ /start)
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=girl_menu_mini()
    )

# 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–¥–æ–±–∞–≤—å –≤ main())
app.add_handler(CommandHandler("start", cmd_start))
app.add_handler(CallbackQueryHandler(send_love, pattern="^love$"))

def main():
    app = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dembel", dembel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    print("Bot started on Render ‚Ä¶")
    app.run_polling(stop_signals=None)   # Render –Ω–µ –ª—é–±–∏—Ç SIGINT

if __name__ == "__main__":
    main()
